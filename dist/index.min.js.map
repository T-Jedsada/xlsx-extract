{"version":3,"sources":["webpack://library/webpack/universalModuleDefinition","webpack://library/webpack/bootstrap","webpack://library/./src/utils.ts","webpack://library/external \"fs\"","webpack://library/external \"os\"","webpack://library/./src/defaults.ts","webpack://library/external \"node-expat\"","webpack://library/external \"sax\"","webpack://library/./src/xml.ts","webpack://library/./src/sheet.ts","webpack://library/./src/cell.ts","webpack://library/./src/row.ts","webpack://library/external \"unzip2\"","webpack://library/./src/book.ts","webpack://library/./src/reader.ts","webpack://library/external \"util\"","webpack://library/external \"path\"","webpack://library/external \"events\"","webpack://library/./src/index.ts"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","xlsx_date","date1904","date","Math","floor","time","round","Date","setDate","getDate","setSeconds","setMinutes","setHours","xlsx_fmts","0","1","2","3","4","9","10","11","12","13","14","15","16","17","18","19","20","21","22","37","38","39","40","45","46","47","48","49","Alphabet","alphaNum","result","multiplier","length","charCodeAt","containsOnlyChars","chars","indexOf","parseFmtType","fmt","b","slice","sp","replace","split","trim","isNaN","parseInt","di","f","numAlpha","charAt","splitCellFormats","fmts","last","ff","push","fmt_type","digits","getColumnFromDef","colDef","cc","isValidDate","getTime","escapeTSV","val","options","delimiter","tsv_delimiter","unescapexml","text","encodings","&quot;","&apos;","&gt;","&lt;","&amp;","$$","$1","String","fromCharCode","j","require","os_1","__importDefault","applyDefaults","defaults","sheet_nr","ignore_header","include_empty_rows","tsv_float_comma","tsv_endofline","default","EOL","parser","format","workfolder","raw_values","round_floats","convert_values","ints","floats","dates","bools","assign","expat","sax_1","lowerFudge","obj","keys","forEach","toLowerCase","SaxSax","this","createStream","lowercase","onStartElement","notify","on","node","attributes","onEndElement","onText","onClose","_this","reported","err","error","resume","piper","SaxExpat","e","Error","createParser","Sheet","getFormat","toJson","toArray","toTSV","join","JSON","stringify","nr","rid","id","utils_1","Cell","undefined","raw","toISOString","toString","getEffectiveNumFormat","applyNumFormat","parseFloat","toFixed","v","convertValue","typ","Row","cells","map","cell","count","isEmpty","filter","Workbook","sheets","sharedStrings","styles","relations","getByRId","find","sheet","getById","getByNr","getByName","book_1","fs_1","unzip2_1","row_1","cell_1","sheet_1","xml_1","defaults_1","XLSXReader","filename","parseXMLSheet","entry","workbook","emit","cb","row","addvalue","addformular","rownum","sax","attrs","rownr","address","col","empty","txt","formula","pipe","parseXMLWorkbookSheets","sheetid","parseXMLWorkbookRelations","target","parseXMLStyles","formatstyles","numFmts","cellXfs","cellXfs_collect","numfmtid","formatcode","fmtnr","stylenr","def","parseXMLStrings","strings","collect_strings","sl","getLookups","sheet_all","rel","sheet_name","sheet_rid","sheet_id","sheetId_1","parseSheets","running","finish","lookups","createReadStream","Parse","lookup","path","row_count_1","row_start_1","autodrain","parseWorkbook","collecting","checkStartParseSheet","read","part","events","__importStar","fs","util","reader_1","XLSX","_super","inherits","EventEmitter","__extends","extract","what","data","convert","destfile","extname","writeable","start","isJSON","createWriteStream","write","end"],"mappings":"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","file":"index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"library\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"library\"] = factory();\n\telse\n\t\troot[\"library\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","import {ICellFormat} from './cell';\nimport {IXLSXExtractOptions} from './types';\n\n/**\n converts a raw xlsx-date to js date\n */\nexport function xlsx_date(value: number, date1904: boolean) {\n\tlet date = Math.floor(value),\n\t\ttime = Math.round(86400 * (value - date)),\n\t\td;\n\tif (date1904) {\n\t\tdate += 1462;\n\t}\n\t// Open XML stores dates as the number of days from 1 Jan 1900. Well, skipping the incorrect 29 Feb 1900 as a valid day.\n\tif (date === 60) {\n\t\td = new Date(1900, 1, 29);\n\t} else {\n\t\tif (date > 60) {\n\t\t\t--date;\n\t\t}\n\t\t/* 1 = Jan 1 1900 */\n\t\td = new Date(1900, 0, 1, 0, 0, 0);\n\t\td.setDate(d.getDate() + date - 1);\n\t}\n\td.setSeconds(time % 60);\n\ttime = Math.floor(time / 60);\n\td.setMinutes(time % 60);\n\ttime = Math.floor(time / 60);\n\td.setHours(time);\n\treturn d;\n}\n\n/**\n xlsx build in nr formats\n */\nexport const xlsx_fmts: { [id: number]: string | null } = {\n\t0: null, // General\n\t1: '0',\n\t2: '0.00',\n\t3: '#,##0',\n\t4: '#,##0.00',\n\n\t9: '0%',\n\t10: '0.00%',\n\t11: '0.00E+00',\n\t12: '# ?/?',\n\t13: '# ??/??',\n\t14: 'mm-dd-yy',\n\t15: 'd-mmm-yy',\n\t16: 'd-mmm',\n\t17: 'mmm-yy',\n\t18: 'h:mm AM/PM',\n\t19: 'h:mm:ss AM/PM',\n\t20: 'h:mm',\n\t21: 'h:mm:ss',\n\t22: 'm/d/yy h:mm',\n\n\t37: '#,##0 ;(#,##0)',\n\t38: '#,##0 ;[Red](#,##0)',\n\t39: '#,##0.00;(#,##0.00)',\n\t40: '#,##0.00;[Red](#,##0.00)',\n\n\t45: 'mm:ss',\n\t46: '[h]:mm:ss',\n\t47: 'mmss.0',\n\t48: '##0.0E+0',\n\t49: '@'\n};\n\nconst Alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n converts a column index to chars e.g. 1 -> A\n */\nexport function numAlpha(i: number): string {\n\tconst t = Math.floor(i / 26) - 1;\n\treturn (t > -1 ? numAlpha(t) : '') + Alphabet.charAt(i % 26);\n}\n\n/**\n converts a chars to column index e.g. A -> 1\n */\nexport function alphaNum(name: string) {\n\tlet result = 0;\n\tlet multiplier = 1;\n\tfor (let i = name.length - 1; i >= 0; i--) {\n\t\tconst value = ((name[i].charCodeAt(0) - 'A'.charCodeAt(0)) + 1);\n\t\tresult = result + value * multiplier;\n\t\tmultiplier = multiplier * 26;\n\t}\n\treturn (result - 1);\n}\n\n/**\n split and parse cell formats\n */\nexport function containsOnlyChars(value: string, chars: string): boolean {\n\tfor (let i = 0; i < value.length; i++) {\n\t\tif (chars.indexOf(value[i]) < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn (value.length > 0);\n}\n\n/**\n splits and parse cell formats\n */\nexport function splitCellFormats(s: string): Array<ICellFormat> {\n\t/*\n\t http://office.microsoft.com/en-gb/excel-help/create-or-delete-a-custom-number-format-HP005199500.aspx?redir=0\n\t _-* #,##0\\ _€_-;\\-* #,##0\\ _€_-;_-* \"-\"??\\ _€_-;_-@_-\n\t positive value ; negative value ; zero; string\n\t */\n\tconst fmts = s.split(/(?!\\\\);/);\n\tlet nr = 0;\n\tlet last = {t: 'x'};\n\tconst result: Array<ICellFormat> = [];\n\tfor (let i = 0; i < fmts.length; i++) {\n\t\tlet ff = parseFmtType(fmts[i]);\n\t\tff = (ff.t === 'l' ? last : ff);\n\t\tlast = ff;\n\t\tresult.push({fmt: fmts[i], fmt_type: ff.t, digits: ff.f});\n\t\tnr++;\n\t}\n\treturn result;\n}\n\n/**\n parse cell format\n */\nfunction parseFmtType(fmt: string): { t: string, f?: number } {\n\t// messy hack for extracting some info from the number format (type and float-digits}\n\tlet s = fmt;\n\tlet b = '';\n\twhile (s.length > 0) {\n\t\tconst c = s[0];\n\t\ts = s.slice(1);\n\t\tif ((c === '_') || (c === '\\\\') || (c === '*')) {\n\t\t\ts = s.slice(1);\n\t\t} else if (c === '[') {\n\t\t\ts = s.slice(s.indexOf(']') + 1);\n\t\t} else if (c === '\"') {\n\t\t\ts = s.slice(s.indexOf('\"') + 1);\n\t\t} else if ((c === '(') || (c === ')')) {\n\t\t\t// nop\n\t\t} else {\n\t\t\tb += c;\n\t\t}\n\t}\n\tb = b.replace(/#/g, '0').replace(/%/g, '');\n\t// deal with thousands separator 12000 -> 12 -> formatCode\t'#,'\n\tlet sp = b.split(',');\n\tb = sp[sp.length - 1];\n\tif (b === '' || (b.trim().indexOf(' ') < 0) && !isNaN(parseInt(b, 10))) {\n\t\tif (b.indexOf('.') >= 0) {\n\t\t\tlet di = sp[sp.length - 1].split('.')[1].trim().length;\n\t\t\tif (b.indexOf('E+') >= 0) {\n\t\t\t\tdi += 14;\n\t\t\t}\n\t\t\treturn {t: 'f', f: di};\n\t\t} else {\n\t\t\treturn {t: 'i'};\n\t\t}\n\t} else if (b === '@') {\n\t\treturn {t: 's'};\n\t}\n\t// '-'?? zero value\n\tif (b === '??') {\n\t\treturn {t: 'l'}; // last fmt should by used\n\t}\n\tsp = b.split(' ');\n\t// test '# ??/??'\n\tif ((sp.length > 1) && (containsOnlyChars(sp[sp.length - 1], '?/'))) {\n\t\t// '# ?/?' or '# ??/??',\n\t\tconst digits = sp[sp.length - 1].split('/')[0].trim().length + 1;\n\t\treturn {t: 'f', f: digits};\n\t}\n\t// date format?\n\tif (containsOnlyChars(b, 'tmdyhseAPTMH:/-.0 ')) {\n\t\treturn {t: 'd'};\n\t}\n\treturn {t: 'x'};\n}\n\n/*\n A1 -> 0\n A2 -> 0\n B2 -> 1\n */\nexport function getColumnFromDef(colDef: string): number {\n\tlet cc = '';\n\tfor (let i = 0; i < colDef.length; i++) {\n\t\tif (isNaN(parseInt(colDef[i], 10))) {\n\t\t\tcc += colDef[i];\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn alphaNum(cc);\n}\n\nexport function isValidDate(d: any): boolean {\n\treturn d instanceof Date && !isNaN(d.getTime());\n}\n\nexport function escapeTSV(val: string, options: IXLSXExtractOptions): string {\n\tconst delimiter = options.tsv_delimiter || '\\t';\n\tif (val && val.indexOf('\"') > -1 || val.indexOf('\\n') > -1 || val.indexOf('\\r') > -1 || val.indexOf(delimiter) > -1) {\n\t\tval = '\"' + val.replace(/\"/g, '\"\"') + '\"';\n\t}\n\treturn val;\n}\n\nexport function unescapexml(text: string): string {\n\tconst encregex = /&(?:quot|apos|gt|lt|amp|#x?([\\da-fA-F]+));/g\n\tconst coderegex = /_x([\\da-fA-F]{4})_/g;\n\tconst encodings: { [key: string]: string } = {\n\t\t'&quot;': '\"',\n\t\t'&apos;': '\\'',\n\t\t'&gt;': '>',\n\t\t'&lt;': '<',\n\t\t'&amp;': '&'\n\t};\n\tconst s = text + '';\n\tconst i = s.indexOf('<![CDATA[');\n\tif (i === -1) {\n\t\treturn s.replace(encregex, function($$, $1) {\n\t\t\treturn encodings[$$] || String.fromCharCode(parseInt($1, $$.indexOf('x') > -1 ? 16 : 10)) || $$;\n\t\t}).replace(coderegex, function(m, c) {\n\t\t\treturn String.fromCharCode(parseInt(c, 16));\n\t\t});\n\t}\n\tconst j = s.indexOf(']]>');\n\treturn unescapexml(s.slice(0, i)) + s.slice(i + 9, j) + unescapexml(s.slice(j + 3));\n\n}\n","module.exports = require(\"fs\");","module.exports = require(\"os\");","import os from 'os';\nimport {IXLSXExtractOptions} from './types';\n\nexport function applyDefaults(options: IXLSXExtractOptions | undefined) {\n\tconst defaults = {\n\t\tsheet_nr: '1',\n\t\tignore_header: 0,\n\t\tdate1904: false,\n\t\tinclude_empty_rows: false,\n\t\ttsv_float_comma: false,\n\t\ttsv_delimiter: '\\t',\n\t\ttsv_endofline: os.EOL,\n\t\tparser: 'sax',\n\t\tformat: 'array',\n\t\tworkfolder: 'xl',\n\t\traw_values: false,\n\t\tround_floats: true,\n\t\tconvert_values: {\n\t\t\tints: true,\n\t\t\tfloats: true,\n\t\t\tdates: true,\n\t\t\tbools: true\n\t\t}\n\t};\n\treturn Object.assign(defaults, options);\n}\n","module.exports = require(\"node-expat\");","module.exports = require(\"sax\");","import stream from 'stream';\nimport sax from 'sax';\n\nimport EXPAT from 'node-expat';\n\nlet expat: typeof EXPAT;\n\nfunction lowerFudge(obj: any): any {\n\tconst result: any = {};\n\tObject.keys(obj).forEach(key => {\n\t\tresult[key.toLowerCase()] = obj[key];\n\t});\n\treturn result;\n}\n\nexport interface ISaxParser {\n\tonStartElement(notify: (name: string, attributes: { [key: string]: string | undefined }) => void): ISaxParser;\n\n\tonEndElement(notify: (name: string) => void): ISaxParser;\n\n\tonText(notify: (txt: string) => void): ISaxParser;\n\n\tonClose(notify: (err?: Error) => void): ISaxParser;\n\n\tpiper(): stream.Duplex;\n}\n\nexport class SaxSax implements ISaxParser {\n\tparser = sax.createStream(false, {lowercase: true});\n\n\tconstructor() {\n\n\t}\n\n\tonStartElement(notify: (name: string, attributes: { [key: string]: string | undefined }) => void): ISaxParser {\n\t\tthis.parser.on('opentag', (node: any) => {\n\t\t\tnotify(node.name.toLowerCase(), lowerFudge(node.attributes));\n\t\t});\n\t\treturn this;\n\t}\n\n\tonEndElement(notify: (name: string) => void): ISaxParser {\n\t\tthis.parser.on('closetag', (name) => {\n\t\t\tnotify(name.toLowerCase());\n\t\t});\n\t\treturn this;\n\t}\n\n\tonText(notify: (txt: string) => void): ISaxParser {\n\t\tthis.parser.on('text', notify);\n\t\treturn this;\n\t}\n\n\tonClose(notify: (err?: Error) => void): ISaxParser {\n\t\tlet reported = false;\n\t\tthis.parser.on('error', (err: Error) => {\n\t\t\tif (!reported) {\n\t\t\t\treported = true;\n\t\t\t\tnotify(err);\n\t\t\t}\n\t\t\t(<any>this.parser).error = null;\n\t\t\tthis.parser.resume();\n\t\t});\n\t\tthis.parser.on('end', () => {\n\t\t\tif (!reported) {\n\t\t\t\tnotify();\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\tpiper(): stream.Duplex {\n\t\treturn this.parser;\n\t}\n}\n\nexport class SaxExpat implements ISaxParser {\n\tparser: any;\n\n\tconstructor() {\n\t\tif (!expat) {\n\t\t\ttry {\n\t\t\t\texpat = require('node-expat');\n\t\t\t} catch (e) {\n\t\t\t\tthrow new Error('To use {parser:\"expat\"} you need to install it manually with \"npm install node-expat\"');\n\t\t\t}\n\t\t}\n\t\tthis.parser = expat.createParser();\n\t}\n\n\tonStartElement(notify: (name: string, attributes: { [key: string]: string | undefined }) => void): ISaxParser {\n\t\tthis.parser.on('startElement', (name: string, attributes: any) => {\n\t\t\tnotify(name.toLowerCase(), lowerFudge(attributes));\n\t\t});\n\t\treturn this;\n\t}\n\n\tonEndElement(notify: (name: string) => void): ISaxParser {\n\t\tthis.parser.on('endElement', (name: string) => {\n\t\t\tnotify(name.toLowerCase());\n\t\t});\n\t\treturn this;\n\t}\n\n\tonText(notify: (txt: string) => void): ISaxParser {\n\t\tthis.parser.on('text', notify);\n\t\treturn this;\n\t}\n\n\tonClose(notify: (err?: Error) => void): ISaxParser {\n\t\tlet reported = false;\n\t\tthis.parser.on('error', (err: Error) => {\n\t\t\treported = true;\n\t\t\tnotify(err);\n\t\t});\n\t\tthis.parser.on('close', () => {\n\t\t\tif (!reported) {\n\t\t\t\tnotify();\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\tpiper(): stream.Duplex {\n\t\treturn this.parser;\n\t}\n}\n","import {IXLSXExtractOptions} from './types';\n\nexport class Sheet {\n\tnr?: string;\n\tid?: string;\n\trid?: string;\n\tname?: string;\n\n\tgetFormat(options: IXLSXExtractOptions): any {\n\t\tswitch (options.format) {\n\t\t\tcase 'json':\n\t\t\t\treturn this.toJson();\n\t\t\tcase 'array':\n\t\t\t\treturn this.toArray();\n\t\t\tcase 'obj':\n\t\t\t\treturn this;\n\t\t\t// case 'tsv':\n\t\t\tdefault:\n\t\t\t\treturn this.toTSV(options);\n\t\t}\n\t}\n\n\ttoTSV(options: IXLSXExtractOptions): string {\n\t\treturn this.toArray().join(options.tsv_delimiter || '\\t') + options.tsv_endofline;\n\t}\n\n\ttoJson(): string {\n\t\treturn JSON.stringify({\n\t\t\tname: this.name,\n\t\t\tnr: this.nr,\n\t\t\trid: this.rid,\n\t\t\tid: this.id\n\t\t});\n\t}\n\n\ttoArray(): Array<string | undefined> {\n\t\treturn [this.name, this.rid, this.nr, this.id];\n\t}\n}\n","import {escapeTSV, isValidDate, unescapexml, xlsx_date} from './utils';\nimport {IXLSXExtractOptions} from './types';\n\nexport interface ICellFormat {\n\tfmt: string;\n\tfmt_type: string;\n\tdigits?: number;\n}\n\nexport interface ICellFormatStyle {\n\tfmt?: string;\n\tfmtnr?: number;\n\tfmts: Array<ICellFormat>;\n\tdef?: { [key: string]: string | undefined };\n}\n\nexport interface ICellFormatStyles {\n\t[id: string]: ICellFormatStyle;\n}\n\nexport class Cell {\n\tval: any;\n\tcol?: number;\n\taddress?: string;\n\ttyp?: string;\n\tfmt?: ICellFormatStyle;\n\tformula?: string;\n\traw?: string;\n\n\tgetFormat(options: IXLSXExtractOptions) {\n\t\tswitch (options.format) {\n\t\t\tcase 'json':\n\t\t\t\treturn this.toJson();\n\t\t\tcase 'array':\n\t\t\t\treturn this.val;\n\t\t\tcase 'obj':\n\t\t\t\treturn this;\n\t\t\t// case 'tsv':\n\t\t\tdefault:\n\t\t\t\treturn this.toTSV(options);\n\t\t}\n\t}\n\n\ttoTSV(options: IXLSXExtractOptions): string | undefined {\n\t\tlet val: string;\n\t\tif (this.val === null || this.val === undefined || this.raw === undefined) {\n\t\t\tval = '';\n\t\t} else if (isValidDate(this.val)) {\n\t\t\tval = this.val.toISOString();\n\t\t} else {\n\t\t\tval = this.val.toString();\n\t\t}\n\t\tif (options.tsv_float_comma && (typeof this.val === 'number')) {\n\t\t\tval = val.replace('.', ',');\n\t\t}\n\t\treturn escapeTSV(val, options);\n\t}\n\n\ttoJson() {\n\t\treturn JSON.stringify(this.val);\n\t}\n\n\tgetEffectiveNumFormat(): ICellFormat | null {\n\t\tif ((!this.fmt) || (this.fmt.fmts.length === 0)) {\n\t\t\treturn null;\n\t\t}\n\t\tif (this.fmt.fmts.length === 1) {\n\t\t\treturn this.fmt.fmts[0];\n\t\t}\n\t\tif (isNaN(this.val)) {\n\t\t\treturn this.fmt.fmts[3];\n\t\t}\n\t\tif (this.val < 0) {\n\t\t\treturn this.fmt.fmts[1];\n\t\t}\n\t\tif (this.val > 0) {\n\t\t\treturn this.fmt.fmts[0];\n\t\t}\n\t\treturn this.fmt.fmts[(this.fmt.fmts.length > 2) ? 2 : 0];\n\t}\n\n\tapplyNumFormat(options: IXLSXExtractOptions) {\n\t\tconst format = this.getEffectiveNumFormat();\n\t\tif (format && options.convert_values) {\n\t\t\tswitch (format.fmt_type) {\n\t\t\t\tcase 'd':\n\t\t\t\t\tif (options.convert_values.dates) {\n\t\t\t\t\t\tthis.val = xlsx_date(this.val, !!options.date1904);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'i':\n\t\t\t\t\tif (options.convert_values.ints) {\n\t\t\t\t\t\tlet i = null;\n\t\t\t\t\t\tif (this.fmt && (this.fmt.fmt === '0\\\\ %' || this.fmt.fmt === '0%')) {\n\t\t\t\t\t\t\ti = Math.round(parseFloat(this.val) * 100);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ti = parseInt(this.val, 10);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!isNaN(i)) {\n\t\t\t\t\t\t\tthis.val = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'f':\n\t\t\t\t\tif ((format.digits !== undefined) && (format.digits > 0) && options.convert_values.floats) {\n\t\t\t\t\t\tif (options.round_floats && !isNaN(this.val)) {\n\t\t\t\t\t\t\tthis.val = this.val.toFixed(format.digits);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst v = parseFloat(this.val);\n\t\t\t\t\t\tif (!isNaN(v)) {\n\t\t\t\t\t\t\tthis.val = v;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// nop\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tconvertValue(options: IXLSXExtractOptions) {\n\t\tif (this.val !== null) {\n\t\t\tswitch (this.typ) {\n\t\t\t\tcase 'n':\n\t\t\t\t\tconst v = parseFloat(this.val);\n\t\t\t\t\tif (!isNaN(v)) {\n\t\t\t\t\t\tthis.val = v;\n\t\t\t\t\t}\n\t\t\t\t\tif ((this.fmt) && (options.convert_values)) {\n\t\t\t\t\t\tthis.applyNumFormat(options);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'str':\n\t\t\t\t\tif (this.raw) {\n\t\t\t\t\t\tthis.val = unescapexml(this.raw);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 's':\n\t\t\t\tcase 'inlineStr':\n\t\t\t\t\tbreak; // string, do nothing\n\t\t\t\tcase 'b':\n\t\t\t\t\tif (options.convert_values && options.convert_values.bools) {\n\t\t\t\t\t\tif (['0', 'FALSE', 'false'].indexOf(this.val) >= 0) {\n\t\t\t\t\t\t\tthis.val = false;\n\t\t\t\t\t\t} else if (['1', 'TRUE', 'true'].indexOf(this.val) >= 0) {\n\t\t\t\t\t\t\tthis.val = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t// case 'e':\n\t\t\t\t// debug('Error cell type: Value will be invalid (\"#REF!\", \"#NAME?\", \"#VALUE!\" or similar).');\n\t\t\t\t// break;\n\t\t\t\tdefault:\n\t\t\t\t// debug('Unknown cell type: \"%s\"', this.typ);\n\t\t\t}\n\t\t}\n\t}\n}\n","import {Cell} from './cell';\nimport {IXLSXExtractOptions} from './types';\n\nexport class Row {\n\tcells: Array<Cell> = [];\n\n\tgetFormat(options: IXLSXExtractOptions) {\n\t\tswitch (options.format) {\n\t\t\tcase 'json':\n\t\t\t\treturn this.toJson();\n\t\t\tcase 'array':\n\t\t\t\treturn this.toArray();\n\t\t\tcase 'obj':\n\t\t\t\treturn this;\n\t\t\t// case 'tsv':\n\t\t\tdefault:\n\t\t\t\treturn this.toTSV(options);\n\t\t}\n\t}\n\n\ttoTSV(options: IXLSXExtractOptions): string {\n\t\treturn this.cells.map(cell => cell.toTSV(options)).join(options.tsv_delimiter || '\\t') + options.tsv_endofline;\n\t}\n\n\ttoJson(): string {\n\t\treturn JSON.stringify(this.toArray());\n\t}\n\n\ttoArray(): Array<string | number | undefined> {\n\t\treturn this.cells.map(cell => cell.val);\n\t}\n\n\tpush(cell: Cell) {\n\t\tthis.cells.push(cell);\n\t}\n\n\tcount(): number {\n\t\treturn this.cells.length;\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn (this.cells.length === 0) || (this.cells.filter(function(cell) {\n\t\t\treturn (cell.val !== null);\n\t\t}).length === 0);\n\t}\n}\n","module.exports = require(\"unzip2\");","import {Sheet} from './sheet';\nimport {ICellFormatStyles} from './cell';\n\nexport class Workbook {\n\tsheets: Array<Sheet> = [];\n\tsharedStrings: Array<string> = [];\n\tstyles: ICellFormatStyles = {};\n\trelations: Array<{ sheetid: string, filename: string }> = [];\n\n\tgetByRId(id: string): Sheet | undefined {\n\t\treturn this.sheets.find(sheet => sheet.rid === id);\n\t}\n\n\tgetById(id: string): Sheet | undefined {\n\t\treturn this.sheets.find(sheet => sheet.id === id);\n\t}\n\n\tgetByNr(nr: string): Sheet | undefined {\n\t\treturn this.sheets.find((sheet) => {\n\t\t\treturn !!sheet.nr && sheet.nr.toString() === nr.toString();\n\t\t});\n\t}\n\n\tgetByName(name: string): Sheet | undefined {\n\t\treturn this.sheets.find(sheet => sheet.name === name);\n\t}\n}\n","import {getColumnFromDef, splitCellFormats, xlsx_fmts} from './utils';\nimport {Workbook} from './book';\nimport fs from 'fs';\nimport unzip from 'unzip2';\nimport {Row} from './row';\nimport {Cell, ICellFormatStyles} from './cell';\nimport {IXLSXExtractOptions} from './types';\nimport {Sheet} from './sheet';\nimport {ISaxParser, SaxExpat, SaxSax} from './xml';\nimport {applyDefaults} from './defaults';\n\n\nexport class XLSXReader {\n\tfilename: string;\n\toptions: IXLSXExtractOptions = {};\n\tworkfolder: string;\n\n\tconstructor(filename: string, options?: IXLSXExtractOptions) {\n\t\tthis.filename = filename;\n\t\tthis.options = applyDefaults(options);\n\t\tthis.workfolder = this.options.workfolder || 'xl';\n\t}\n\n\tprivate createParser(): ISaxParser {\n\t\tif (this.options.parser === 'expat') {\n\t\t\treturn new SaxExpat();\n\t\t}\n\t\treturn new SaxSax();\n\t}\n\n\tprivate parseXMLSheet(entry: unzip.ZipEntry, workbook: Workbook, emit: (row?: Row | null, cell?: Cell | null) => void, cb: (err?: Error) => void) {\n\t\t/*\n\t\t converts cell value according to the cell type & number format\n\t\t */\n\t\tlet addvalue = false;\n\t\tlet addformular = false;\n\t\tlet row: Row;\n\t\tlet rownum = 1;\n\t\tlet cell: Cell;\n\t\tconst sax = this.createParser()\n\t\t\t.onStartElement((name, attrs) => {\n\t\t\t\tif (name === 'row') {\n\t\t\t\t\tif (this.options.include_empty_rows) {\n\t\t\t\t\t\tconst rownr = parseInt(attrs.r || '', 10);\n\t\t\t\t\t\t// TODO: if rows are not sorted, we are screwed - track and warn user if so\n\t\t\t\t\t\t// reading them first and sort is not wanted, since rows are streamed\n\t\t\t\t\t\twhile (rownum < rownr) {\n\t\t\t\t\t\t\trownum++;\n\t\t\t\t\t\t\temit(new Row());\n\t\t\t\t\t\t}\n\t\t\t\t\t\trownum = rownr + 1;\n\t\t\t\t\t}\n\t\t\t\t\trow = new Row();\n\t\t\t\t} else if (name === 'c') {\n\t\t\t\t\tcell = new Cell();\n\t\t\t\t\tcell.typ = (attrs.t ? attrs.t : 'n');\n\t\t\t\t\tcell.fmt = attrs.s ? workbook.styles[attrs.s] : undefined;\n\t\t\t\t\tcell.address = attrs.r;\n\t\t\t\t\tcell.col = getColumnFromDef(attrs.r || '');\n\t\t\t\t\t// TODO: if cols are not sorted, we are screwed - track and warn user if so\n\t\t\t\t\twhile (row.count() < cell.col) {\n\t\t\t\t\t\tconst empty = new Cell();\n\t\t\t\t\t\tempty.col = row.count();\n\t\t\t\t\t\trow.push(empty);\n\t\t\t\t\t\temit(null, cell);\n\t\t\t\t\t}\n\t\t\t\t\trow.push(cell);\n\t\t\t\t} else if (name === 'v') {\n\t\t\t\t\taddvalue = true;\n\t\t\t\t} else if (name === 't') { // support for inline text <c t=\"inlineStr\"><is><t>Product</t></is></c>\n\t\t\t\t\taddvalue = true;\n\t\t\t\t} else if (name === 'f') {\n\t\t\t\t\taddformular = true;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onEndElement((name) => {\n\t\t\t\tif (name === 'row') {\n\t\t\t\t\tif (row) {\n\t\t\t\t\t\tif (row.cells.length > 0 || this.options.include_empty_rows) {\n\t\t\t\t\t\t\temit(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (name === 'v') {\n\t\t\t\t\taddvalue = false;\n\t\t\t\t} else if (name === 't') {\n\t\t\t\t\taddvalue = false;\n\t\t\t\t} else if (name === 'f') {\n\t\t\t\t\taddformular = false;\n\t\t\t\t} else if (name === 'c') {\n\t\t\t\t\taddvalue = false;\n\t\t\t\t\tif (cell.col !== undefined && cell.col >= 0) {\n\t\t\t\t\t\tif (cell.typ === 's') {\n\t\t\t\t\t\t\tcell.val = workbook.sharedStrings[parseInt(cell.val, 10)];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcell.raw = cell.val;\n\t\t\t\t\t\tif (!this.options.raw_values) {\n\t\t\t\t\t\t\tcell.convertValue(this.options);\n\t\t\t\t\t\t}\n\t\t\t\t\t\temit(null, cell);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onText((txt: string) => {\n\t\t\t\tif (addvalue) {\n\t\t\t\t\tcell.val = (cell.val ? cell.val : '') + txt;\n\t\t\t\t}\n\t\t\t\tif (addformular) {\n\t\t\t\t\tcell.formula = (cell.formula ? cell.formula : '') + txt;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onClose(cb);\n\t\tentry.pipe(sax.piper());\n\t}\n\n\tprivate parseXMLWorkbookSheets(entry: unzip.ZipEntry, cb: (err: Error | undefined, sheets: Array<Sheet>) => void) {\n\t\tconst sheets: Array<Sheet> = [];\n\t\tconst sax = this.createParser()\n\t\t\t.onStartElement((name, attrs) => {\n\t\t\t\tif (name === 'sheet') {\n\t\t\t\t\tconst sheet = new Sheet();\n\t\t\t\t\tsheet.rid = attrs['r:id'] || '';\n\t\t\t\t\tsheet.id = attrs.sheetid;\n\t\t\t\t\tsheet.nr = (sheets.length + 1).toString();\n\t\t\t\t\tsheet.name = attrs.name;\n\t\t\t\t\tsheets.push(sheet);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onClose((err) => {\n\t\t\t\tcb(err, sheets);\n\t\t\t});\n\t\tentry.pipe(sax.piper());\n\t}\n\n\tprivate parseXMLWorkbookRelations(entry: unzip.ZipEntry, cb: (err: Error | undefined, relations: Array<{ sheetid: string, filename: string }>) => void) {\n\t\tconst relations: Array<{ sheetid: string, filename: string }> = [];\n\t\tconst sax = this.createParser()\n\t\t\t.onStartElement((name, attrs) => {\n\t\t\t\tif (\n\t\t\t\t\t(name === 'relationship') &&\n\t\t\t\t\t(typeof attrs.target === 'string') &&\n\t\t\t\t\t(attrs.target.toLowerCase().indexOf('worksheets/sheet') >= 0) &&\n\t\t\t\t\tattrs.id) {\n\t\t\t\t\trelations.push({sheetid: attrs.id, filename: attrs.target});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onClose((err) => {\n\t\t\t\tcb(err, relations);\n\t\t\t});\n\t\tentry.pipe(sax.piper());\n\t}\n\n\tprivate parseXMLStyles(entry: unzip.ZipEntry, cb: (err: Error | undefined, formatstyles: ICellFormatStyles) => void) {\n\t\tconst formatstyles: ICellFormatStyles = {};\n\t\tconst numFmts: { [id: string]: string } = {};\n\t\tconst cellXfs: Array<number> = [];\n\t\tlet cellXfs_collect = false;\n\t\tconst sax = this.createParser()\n\t\t\t.onStartElement((name, attrs) => {\n\t\t\t\tif (name === 'numfmt') {\n\t\t\t\t\tif (attrs.numfmtid && attrs.formatcode) {\n\t\t\t\t\t\tnumFmts[attrs.numfmtid] = attrs.formatcode;\n\t\t\t\t\t}\n\t\t\t\t} else if (name === 'cellxfs') {\n\t\t\t\t\tcellXfs_collect = true;\n\t\t\t\t} else if ((cellXfs_collect) && (name === 'xf')) {\n\t\t\t\t\tconst fmtnr = parseInt(attrs.numfmtid || '', 10);\n\t\t\t\t\tcellXfs.push(fmtnr);\n\t\t\t\t\tconst stylenr = (cellXfs.length - 1).toString();\n\t\t\t\t\tconst fmt = numFmts[fmtnr] || xlsx_fmts[fmtnr];\n\t\t\t\t\tformatstyles[stylenr] = {\n\t\t\t\t\t\tfmt: fmt === null ? undefined : fmt,\n\t\t\t\t\t\tfmtnr: fmtnr,\n\t\t\t\t\t\tfmts: (fmt ? splitCellFormats(fmt) : []),\n\t\t\t\t\t\tdef: attrs\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onEndElement((name: string) => {\n\t\t\t\tif (name === 'cellxfs') {\n\t\t\t\t\tcellXfs_collect = false;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onClose((err) => {\n\t\t\t\tcb(err, formatstyles);\n\t\t\t});\n\t\tentry.pipe(sax.piper());\n\t}\n\n\tprivate parseXMLStrings(entry: unzip.ZipEntry, cb: (err: Error | undefined, strings: Array<string>) => void) {\n\t\tconst strings: Array<string> = [];\n\t\tlet collect_strings = false;\n\t\tlet sl: Array<string> = [];\n\t\tlet s = '';\n\t\tconst sax = this.createParser()\n\t\t\t.onStartElement((name, attrs) => {\n\t\t\t\tif (name === 'si') {\n\t\t\t\t\tsl = [];\n\t\t\t\t}\n\t\t\t\tif (name === 't') {\n\t\t\t\t\tcollect_strings = true;\n\t\t\t\t\ts = '';\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onEndElement((name) => {\n\t\t\t\tif (name === 't') {\n\t\t\t\t\tsl.push(s);\n\t\t\t\t\tcollect_strings = false;\n\t\t\t\t}\n\t\t\t\tif (name === 'si') {\n\t\t\t\t\tstrings.push(sl.join(''));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onText((txt) => {\n\t\t\t\tif (collect_strings) {\n\t\t\t\t\ts = s + txt.replace(/\\r\\n/g, '\\n');\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onClose((err) => {\n\t\t\t\tcb(err, strings);\n\t\t\t});\n\t\tentry.pipe(sax.piper());\n\t}\n\n\tprivate getLookups(workbook: Workbook): Array<{ sheet?: Sheet, filename: string }> {\n\t\tconst result: Array<{ sheet?: Sheet, filename: string }> = [];\n\t\tif (this.options.sheet_all) {\n\t\t\tworkbook.sheets.forEach(s => {\n\t\t\t\tconst rel = workbook.relations.find(r => r.sheetid === s.rid);\n\t\t\t\tif (rel) {\n\t\t\t\t\tresult.push({sheet: s, filename: this.workfolder + '/' + rel.filename});\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn result;\n\t\t}\n\t\tlet sheet: Sheet | undefined;\n\t\tif (this.options.sheet_name) {\n\t\t\tsheet = workbook.getByName(this.options.sheet_name);\n\t\t} else if (this.options.sheet_rid) {\n\t\t\tsheet = workbook.getByRId(this.options.sheet_rid.toString());\n\t\t} else if (this.options.sheet_id) {\n\t\t\tconst sheet_id = this.options.sheet_id.toString();\n\t\t\tsheet = workbook.getById(sheet_id);\n\t\t} else {\n\t\t\tconst sheet_nr = this.options.sheet_nr || '1';\n\t\t\tsheet = workbook.getByNr(sheet_nr);\n\t\t\tif (!sheet) {\n\t\t\t\tresult.push({filename: this.workfolder + '/worksheets/sheet' + sheet_nr + '.xml'});\n\t\t\t}\n\t\t}\n\t\tif (sheet) {\n\t\t\tconst sheetId = sheet.rid;\n\t\t\tconst rel = workbook.relations.find(r => r.sheetid === sheetId);\n\t\t\tif (rel) {\n\t\t\t\tresult.push({sheet, filename: this.workfolder + '/' + rel.filename});\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate parseSheets(workbook: Workbook, emit: (part: { err?: Error, cell?: Cell, row?: Row, sheet?: Sheet }) => void) {\n\t\tlet running = 1;\n\n\t\tconst finish = () => {\n\t\t\tif (running === 0) {\n\t\t\t\temit({});\n\t\t\t}\n\t\t};\n\t\tconst lookups = this.getLookups(workbook);\n\t\tfs.createReadStream(this.filename)\n\t\t\t.pipe(unzip.Parse())\n\t\t\t.on('error', (err: Error) => {\n\t\t\t\temit({err});\n\t\t\t\temit({});\n\t\t\t})\n\t\t\t.on('entry', (entry: unzip.ZipEntry) => {\n\t\t\t\tconst lookup = lookups.find(l => l.filename === entry.path);\n\t\t\t\tif (lookup) {\n\t\t\t\t\trunning++;\n\t\t\t\t\tlet row_count = 1;\n\t\t\t\t\tconst row_start = this.options.ignore_header || 0;\n\t\t\t\t\tif (lookup.sheet) {\n\t\t\t\t\t\temit({sheet: lookup.sheet});\n\t\t\t\t\t}\n\t\t\t\t\tthis.parseXMLSheet(entry, workbook, (row, cell) => {\n\t\t\t\t\t\tif (cell) {\n\t\t\t\t\t\t\tif (row_count > row_start) {\n\t\t\t\t\t\t\t\temit({cell: cell});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (row) {\n\t\t\t\t\t\t\tif (row_count > row_start) {\n\t\t\t\t\t\t\t\temit({row: row});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\trow_count++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}, (err) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\temit({err: err});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trunning--;\n\t\t\t\t\t\t\tfinish();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tentry.autodrain();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.on('close', () => {\n\t\t\t\trunning--;\n\t\t\t\tfinish();\n\t\t\t});\n\t}\n\n\tprivate parseWorkbook(emit: (part: { err?: Error, cell?: Cell, row?: Row, sheet?: Sheet }) => void) {\n\t\tconst workbook = new Workbook();\n\t\tlet collecting = 1;\n\n\t\tconst checkStartParseSheet = () => {\n\t\t\tcollecting--;\n\t\t\tif (collecting === 0) {\n\t\t\t\tthis.parseSheets(workbook, emit);\n\t\t\t}\n\t\t};\n\n\t\t// first get styles & strings\n\t\t// TODO: is there really no memory friendly way to NOT read zip stream twice for styles/strings/etc and then for sheets?\n\t\tfs.createReadStream(this.filename)\n\t\t\t.pipe(unzip.Parse())\n\t\t\t.on('error', (err: Error) => {\n\t\t\t\temit({err});\n\t\t\t\temit({});\n\t\t\t})\n\t\t\t.on('entry', (entry: unzip.ZipEntry) => {\n\t\t\t\tif (entry.path === this.workfolder + '/sharedStrings.xml') {\n\t\t\t\t\tcollecting++;\n\t\t\t\t\tthis.parseXMLStrings(entry, (err, strings) => {\n\t\t\t\t\t\tworkbook.sharedStrings = strings;\n\t\t\t\t\t\tcheckStartParseSheet();\n\t\t\t\t\t});\n\t\t\t\t} else if (entry.path === this.workfolder + '/styles.xml') {\n\t\t\t\t\tcollecting++;\n\t\t\t\t\tthis.parseXMLStyles(entry, (err, formatstyles) => {\n\t\t\t\t\t\tworkbook.styles = formatstyles;\n\t\t\t\t\t\tcheckStartParseSheet();\n\t\t\t\t\t});\n\t\t\t\t} else if (entry.path === this.workfolder + '/workbook.xml') {\n\t\t\t\t\tcollecting++;\n\t\t\t\t\tthis.parseXMLWorkbookSheets(entry, (err, sheets) => {\n\t\t\t\t\t\tworkbook.sheets = sheets;\n\t\t\t\t\t\tcheckStartParseSheet();\n\t\t\t\t\t});\n\t\t\t\t} else if (entry.path === this.workfolder + '/_rels/workbook.xml.rels') {\n\t\t\t\t\tcollecting++;\n\t\t\t\t\tthis.parseXMLWorkbookRelations(entry, (err, relations) => {\n\t\t\t\t\t\tworkbook.relations = relations;\n\t\t\t\t\t\tcheckStartParseSheet();\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tentry.autodrain();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.on('close', () => {\n\t\t\t\tcheckStartParseSheet();\n\t\t\t});\n\t}\n\n\tread(emit: (what: string, data?: any) => void) {\n\t\tthis.parseWorkbook(part => {\n\t\t\tif (part.err) {\n\t\t\t\temit('error', part.err);\n\t\t\t} else if (part.cell) {\n\t\t\t\temit('cell', part.cell.getFormat(this.options));\n\t\t\t} else if (part.row) {\n\t\t\t\temit('row', part.row.getFormat(this.options));\n\t\t\t} else if (part.sheet) {\n\t\t\t\temit('sheet', part.sheet.getFormat(this.options));\n\t\t\t} else {\n\t\t\t\temit('end');\n\t\t\t}\n\t\t});\n\t}\n}\n","module.exports = require(\"util\");","module.exports = require(\"path\");","module.exports = require(\"events\");","import {IXLSXExtractOptions} from './types';\nimport * as events from 'events';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport * as util from 'util';\nimport {XLSXReader} from './reader';\n\nexport class XLSX extends events.EventEmitter {\n\n\tconstructor() {\n\t\tsuper();\n\t\tutil.inherits(XLSX, events.EventEmitter);\n\t\tevents.EventEmitter.call(this);\n\t}\n\n\textract(filename: string, options?: IXLSXExtractOptions): XLSX {\n\t\tconst reader = new XLSXReader(filename, options);\n\t\treader.read((what: string, data: any) => {\n\t\t\tthis.emit(what, data);\n\t\t});\n\t\treturn this;\n\t}\n\n\tconvert(filename: string, destfile: string, options: IXLSXExtractOptions): XLSX {\n\t\toptions = options || {};\n\n\t\tif ((!options.format) && ((path.extname(destfile).toLowerCase() === '.json'))) {\n\t\t\toptions.format = 'json';\n\t\t}\n\t\tif (options.format !== 'json') {\n\t\t\toptions.format = 'tsv';\n\t\t}\n\n\t\tlet start = true;\n\t\tconst isJSON = options.format !== 'tsv';\n\t\tlet writeable: fs.WriteStream;\n\t\ttry {\n\t\t\twriteable = fs.createWriteStream(destfile);\n\t\t\tif (isJSON) {\n\t\t\t\twriteable.write('[');\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.emit('error', e);\n\t\t\tthis.emit('end');\n\t\t\treturn this;\n\t\t}\n\t\twriteable.on('close', () => {\n\t\t\tthis.emit('end');\n\t\t});\n\t\tconst reader = new XLSXReader(filename, options);\n\t\treader.read((what, data) => {\n\t\t\tswitch (what) {\n\t\t\t\tcase 'error':\n\t\t\t\t\tthis.emit('error', data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'cell':\n\t\t\t\t\tthis.emit('cell', data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'row':\n\t\t\t\t\tif (isJSON) {\n\t\t\t\t\t\tif (start) {\n\t\t\t\t\t\t\tstart = false;\n\t\t\t\t\t\t\twriteable.write(options.tsv_endofline);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twriteable.write(',' + options.tsv_endofline);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.emit('row', data);\n\t\t\t\t\twriteable.write(data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'end':\n\t\t\t\t\tif (isJSON) {\n\t\t\t\t\t\twriteable.write(options.tsv_endofline + ']');\n\t\t\t\t\t}\n\t\t\t\t\twriteable.end();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n}\n"],"sourceRoot":""}